{"version":3,"sources":["components/Header.js","components/Landing.js","actions/types.js","actions/index.js","components/Dashboard.js","components/post/postFormField.js","components/post/NewPostForm.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/authReducer.js","reducers/postReducer.js","index.js"],"names":["Header","this","props","auth","href","to","className","renderContent","Component","connect","state","Landing","FETCH_USER","FETCH_POSTS","fetchUser","dispatch","a","axios","get","res","type","payload","data","sendPost","values","history","post","push","fetchPosts","Dashboard","posts","reverse","map","title","content","input","label","meta","touched","error","style","marginBottom","NewPostForm","Field","name","component","postFormField","Form","onSubmit","handleSubmit","reduxForm","validate","errors","form","withRouter","App","exact","path","actions","Boolean","window","location","hostname","match","combineReducers","action","formReducer","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b10197a.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Link} from \"react-router-dom\";\r\n\r\n\r\nclass Header extends Component{\r\n\r\n    renderContent() {\r\n\r\n        switch (this.props.auth) {\r\n\r\n            case null :\r\n                return;\r\n            case false :\r\n                return <li><a href=\"/login\"> login with google </a></li>;\r\n            default :\r\n                return [\r\n                    <li><a href=\"/api/logout\"> logout</a></li>,\r\n                    <li>\r\n\r\n                        <Link to=\"/post/new\" >\r\n                        new post\r\n\r\n                        </Link>\r\n                    </li>\r\n                ];\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return(\r\n            <nav>\r\n            <div className=\"nav-wrapper\">\r\n                <Link to={this.props.auth ? '/dashboard' : '/'}  className=\"brand-logo\">\r\n                    Intouch\r\n                </Link>\r\n                <ul className=\"right\">\r\n                    {this.renderContent()}\r\n\r\n\r\n                </ul>\r\n\r\n            </div>\r\n            </nav>\r\n        );\r\n    }\r\n\r\n\r\n}\r\nfunction mapStateToProps(state){\r\n\r\n\r\n    return{\r\n\r\n        auth:state.auth\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Header);","import React,{Component} from 'react';\r\n\r\nclass Landing extends Component{\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                Landing\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Landing;","\r\nexport const FETCH_USER ='fetch_user';\r\nexport const FETCH_POSTS ='fetch_posts';","import axios from 'axios';\r\nimport {FETCH_USER,FETCH_POSTS} from \"./types\";\r\n\r\nexport function fetchUser() {\r\n\r\n     return async (dispatch)=>{\r\n         const res=await axios.get('/api/current_user');\r\n         dispatch({type:FETCH_USER,payload:res.data});\r\n     }\r\n}\r\n\r\nexport function sendPost(values,history) {\r\n    return async (dispatch) => {\r\n        const res=await axios.post('/api/post',values);\r\n        history.push('/dashboard');\r\n        dispatch({type:FETCH_USER,payload:res.data} );\r\n    }\r\n}\r\n\r\nexport function fetchPosts() {\r\n\r\n    return async (dispatch)=>{\r\n        const res=await axios.get('/api/posts');\r\n        dispatch({type:FETCH_POSTS,payload:res.data});\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Link} from \"react-router-dom\";\r\nimport {connect} from 'react-redux';\r\nimport {fetchPosts} from \"../actions\";\r\n\r\nclass Dashboard extends Component{\r\n\r\n    componentDidMount() {\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"push-s3\">\r\n                <ul>\r\n                    {this.props.posts.reverse().map((post) =>{\r\n\r\n                        return(\r\n                        <div className=\"row \">\r\n                            <div className=\"col s12 m6 push-m3 \">\r\n                                <div className=\"card blue-grey darken-1\">\r\n                                    <div className=\"card-content white-text\">\r\n                                        <span className=\"card-title  center-align\">{post.title}</span>\r\n                                        <p>\r\n                                            {post.content}\r\n                                        </p>\r\n                                    </div>\r\n                                    {/*<div className=\"card-action\">*/}\r\n                                    {/*    <a href=\"#\">This is a link</a>*/}\r\n                                    {/*    <a href=\"#\">This is a link</a>*/}\r\n                                    {/*</div>*/}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        )})}\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        posts:state.posts\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,{fetchPosts})(Dashboard);","import React from 'react';\r\n\r\nexport default ({input,label, meta :{touched,error}}) =>{\r\n\r\n    return (\r\n        <div>\r\n            <label>{label}</label>\r\n            <input {...input}  style={{marginBottom : '5px'}} />\r\n            <div className=\"red-text\">\r\n            {touched && error}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}","import React ,{Component} from 'react';\r\nimport {reduxForm,Field,Form} from 'redux-form';\r\nimport {withRouter, Link} from 'react-router-dom';\r\nimport {sendPost} from '../../actions';\r\nimport {connect} from 'react-redux';\r\nimport postFormField from \"./postFormField\";\r\nclass NewPostForm extends Component{\r\n\r\n\r\n\r\n\r\n    renderContent(){\r\n        return(\r\n            <div>\r\n                <Field name=\"title\" type=\"text\" label=\"title\" component={postFormField}/>\r\n                <Field name=\"content\" type=\"text\" label=\"content\" component={postFormField}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n    return(\r\n        <div>\r\n\r\n            <Form onSubmit={this.props.handleSubmit((values) => this.props.sendPost(values,this.props.history))}>\r\n            {this.renderContent()}\r\n\r\n           <Link to='/dashboard' className=\"red  btn-flat\">\r\n               Back\r\n           </Link>\r\n            <button type=\"submit\" className=\"right teal  btn-flat\">\r\n                Post\r\n            </button>\r\n            </Form>\r\n        </div>\r\n\r\n)\r\n}\r\n\r\n\r\n\r\n}\r\n\r\nfunction validate(values) {\r\n\r\n    const errors={};\r\n\r\n   if(!values.title)\r\n       errors.title=\"provide bitch !\";\r\n   if(!values.content)\r\n       errors.content=\"provide bitch !\";\r\n\r\n   return errors;\r\n}\r\n\r\n\r\nexport default connect(null,{sendPost})(reduxForm({\r\n    validate,\r\n    form:'newPostForm'\r\n\r\n\r\n})(withRouter(NewPostForm)));","import React,{Component} from 'react';\r\nimport '../App.css';\r\nimport {BrowserRouter,Route} from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport {connect} from 'react-redux';\r\nimport Landing from \"./Landing\";\r\nimport Dashboard from \"./Dashboard\";\r\nimport * as actions from '../actions';\r\nimport NewPostForm from \"./post/NewPostForm\";\r\n\r\nclass App extends Component{\r\n    componentDidMount() {\r\n        this.props.fetchUser();\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <BrowserRouter>\r\n                    <div>\r\n                        <Header/>\r\n                        <Route exact path=\"/\" component={Landing}/>\r\n                        <Route exact path=\"/dashboard\" component={Dashboard}/>\r\n                        <Route exact path=\"/post/new\" component={NewPostForm}/>\r\n\r\n\r\n                    </div>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default connect(null,actions)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\r\nimport authReducer from \"./authReducer\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport postReducer from \"./postReducer\";\r\n\r\n\r\nexport default combineReducers({\r\n   auth : authReducer,\r\n   form:formReducer,\r\n   posts:postReducer\r\n});","import {FETCH_USER} from \"../actions/types\";\r\n\r\nexport default function authReducer(state=null,action) {\r\n\r\n    switch (action.type) {\r\n\r\n\r\n        case FETCH_USER :\r\n            return action.payload || false ;\r\n        default:    return state;\r\n\r\n    }\r\n}","import {FETCH_POSTS} from \"../actions/types\";\r\n\r\nexport default function postReducer(state=[],actions){\r\n\r\n    switch (actions.type) {\r\n\r\n        case FETCH_POSTS :\r\n            return actions.payload;\r\n        default :\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'materialize-css/dist/css/materialize.min.css';\nimport App from './components/App';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware} from \"redux\";\nimport * as serviceWorker from './serviceWorker';\nimport reducers from './reducers';\nimport reduxThunk from 'redux-thunk';\n\nconst store=createStore(reducers,{},applyMiddleware(reduxThunk));\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}